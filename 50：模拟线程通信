1：多个线程共同操作的共享资源：User类 含有money存款，以及存钱与取钱的方法
​

publicclassUser{
    privatedoublemoney;
publicUser(){
    }
publicUser(doublemoney){
        this.money = money;
    }
publicdoublegetMoney(){
        returnmoney;
    }
publicvoidsetMoney(doublemoney){
        this.money = money;
    }
/***
     * 存钱的方法
     * @parammoney
     */publicsynchronizedvoidupdateMoney(Double money){
        try{
            System.out.println(Thread.currentThread()+"进来了");
            Thread.sleep(2000);
            if(this.money==0){
                this.money+=money;
                System.out.println(Thread.currentThread()+"存钱"+money);
                this.notifyAll();
                this.wait();
            }else{
                this.notifyAll();
                this.wait();
            }
        } catch(InterruptedException e) {
            e.printStackTrace();
        }
    }
    /***
     * 取钱的方法的方法
     * @paramv
     */publicsynchronizedvoiddeleteMoney(doublev){
        try{
            System.out.println(Thread.currentThread()+"进来了");
            Thread.sleep(2000);
            if(this.money>=v){
                this.money-=v;
                System.out.println(Thread.currentThread()+"取钱"+v);
                this.notifyAll();
                this.wait();
            }else{
                this.notifyAll();
                this.wait();
            }
        } catch(InterruptedException e) {
            e.printStackTrace();
        }
    }
}


​
创建两个线程：存款线程与取款线程
​
//取钱publicclassGetThreadextendsThread{
    privateUser user;
publicGetThread(User user,String name){
        super(name);
        this.user = user;
    }
    @Overridepublicvoidrun(){
        while(true) {
            user.deleteMoney(1000.0);
        }
    }
}


​
​
//存钱publicclassSetThreadextendsThread{
    privateUser user;
publicSetThread(User user,String name){
        super(name);
        this.user = user;
    }
    @Overridepublicvoidrun(){
        while(true) {
            user.updateMoney(10000.0);
        }
    }
}


​
主方法：
​

publicclassTestDamo{
    
    publicstaticvoidmain(String[] args){
        User user=newUser(1000);
        newGetThread(user,"小明1").start();
        newGetThread(user,"小明2").start();
newSetThread(user,"小红1").start();
        newSetThread(user,"小红2").start();
        newSetThread(user,"小红3").start();
    }
}


​

