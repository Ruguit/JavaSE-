Dom解析的文档对象模型;
Document对象:整个xml文档
 Node对象;
  Element对象:标签，Attribute对象：属性，Text对象：文本内容
 
 
 Dom4J解析：
 
<?xml version="1.0" encoding="UTF-8"?>
<contactList>
    <contact id="1" vip="true">
        <name>   潘金莲  </name>
        <gender>女</gender>
        <email>panpan@itcast.cn</email>
    </contact>
    <contact id="2" vip="false">
        <name>武松</name>
        <gender>男</gender>
        <email>wusong@itcast.cn</email>
    </contact>
    <contact id="3" vip="false">
        <name>武大狼</name>
        <gender>男</gender>
        <email>wuda@itcast.cn</email>
    </contact>
    <user>
        <contact>
            <info>

                <name id="8">我是西门庆</name>
            </info>
         </contact>
    </user>
</contactList>


import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.junit.Test;
import java.io.InputStream;
import java.util.List;

public class TestDamo {
    //目标：学会使用Dom4J解析XML中的文件
    @Test
    public void parseXMLdata() throws DocumentException {
        SAXReader saxReader=new SAXReader();
        InputStream is=TestDamo.class.getResourceAsStream("/Contacts2.xml");
        Document document=saxReader.read(is);
        //获取根元素对象
        Element root=document.getRootElement();
        System.out.println(root.getName());//contactList
        //获取根元素下是所有子元素对象(一级元素)
        List<Element> sumElement=root.elements();
        for (Element element1 : sumElement) {
            System.out.println(element1.getName());
        }/*contact
        contact
        contact
        user*/
        //拿某个子元素
        Element userElement=root.element("user");
        System.out.println(userElement.getName());//user

        //默认提取第一个
        Element conElement=root.element("contact");
        //获取子元素文本
        System.out.println(conElement.elementText("name"));// 潘金莲
        //去掉前后空格
        System.out.println(conElement.elementTextTrim("name"));//潘金莲
        //根据元素获取元素属性值
        Attribute id = conElement.attribute("id");
        System.out.println(id.getName()+"--->"+id.getValue());//id--->1
        //直接获取属性值
        System.out.println(conElement.attributeValue("id"));//1
        //继续获得子元素对象
        Element email = conElement.element("email");
        System.out.println(email.getText());//panpan@itcast.cn

    }

}


Xpath:XML文件的数据检索技术:XPath
//绝对路径：/根元素/子元素/子元素
    @Test
    public void parseXMLdata() throws DocumentException {
        //得到解析器对象
        SAXReader saxReader=new SAXReader();
        InputStream is=TestDamo.class.getResourceAsStream("/Contacts2.xml");
        //把XML加载成Document对象。
        Document document=saxReader.read(is);
        //检索全部的名称
        List<Node> nameNodes = document.selectNodes("/contactList/contact/name");
        for (Node nameNode : nameNodes) {
            Element nameElement=(Element)nameNode;//节点强行转换为元素
            System.out.println(nameElement.getTextTrim());//得到元素的文本对象
        }

    }


//相对路径：./子元素/子元素  .代表当前的元素
    @Test
    public void parseXMLdata() throws DocumentException {
        //得到解析器对象
        SAXReader saxReader=new SAXReader();
        InputStream is=TestDamo.class.getResourceAsStream("/Contacts2.xml");
        //把XML加载成Document对象。
        Document document=saxReader.read(is);
        //得到根元素
        Element root=document.getRootElement();
        //检索全部的名称
        List<Node> nameNodes = root.selectNodes("./contact/name");
        for (Node nameNode : nameNodes) {
            Element nameElement=(Element)nameNode;//节点强行转换为元素
            System.out.println(nameElement.getTextTrim());//得到元素的文本对象
        }

    }




    //全文检索：-》//元素：代表在全文找这个全部元素  -》 //元素1/元素2：在全文找元素1下的一级元素2 -》 //元素1//元素2：在全文找元素1下的全部元素2
    @Test
    public void parseXMLdata() throws DocumentException {
        //得到解析器对象
        SAXReader saxReader=new SAXReader();
        InputStream is=TestDamo.class.getResourceAsStream("/Contacts2.xml");
        //把XML加载成Document对象。
        Document document=saxReader.read(is);
        List<Node> nodes = document.selectNodes("//name");
        List<Node> nodes1 = document.selectNodes("//contact/name");
        List<Node> nodes2 = document.selectNodes("//contact//name");
    }





/*
    * @属性名称：在全文检索
    * 元素【@属性名称】：在全文检索包含该属性的元素对象
    * 元素【@属性名称=值】：在全文检索包含该属且属性值是该值的元素对象
    * */
    @Test
    public void parseXMLdata() throws DocumentException {
        //得到解析器对象
        SAXReader saxReader=new SAXReader();
        InputStream is=TestDamo.class.getResourceAsStream("/Contacts2.xml");
        //把XML加载成Document对象。
        Document document=saxReader.read(is);
        List<Node> nodes = document.selectNodes("//@id");
        for (Node node : nodes) {
            Attribute attribute=(Attribute)node;
            System.out.println(attribute.getName()+"->"+attribute.getValue());
        }/*id->1
id->2
id->3
id->8*/
        //查询name对象（包含id的） 默认找第一个
         Node nodes1 = document.selectSingleNode("//name[@id]");
         Element element=(Element)nodes1;//节点转换为对象
         System.out.println(element.getTextTrim());//我是西门庆

        //查询name对象（包含id的，且值确定的） 默认找第一个
        Node nodes2 = document.selectSingleNode("//name[@id=8]");
        Element element1=(Element)nodes2;//节点转换为对象
        System.out.println(element1.getTextTrim());//我是西门庆
    }


