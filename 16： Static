static是什么：
静态的意思，用于修饰成员变量与成员方法。
被修饰的变量在内存中只存储一份，可以被共享访问，修改；

Static-成员变量的分类:
静态成员变量：static 修饰：属于类，内存中加载一次  访问方式推荐：类名.静态成员变量
实例成员变量：无static 修饰 ：属于对象  访问方式推荐：对象.实例成员变量

成员变量的内存机制
堆内存中开辟一个类的静态变量区：

成员方法：
方法有无static修饰的区别
静态成员方法	static修饰，归属于类，建议使用类名访问。
实例成员方法	无static修饰，归属于对象，只能使用对象访问。
注意：用于表现对象自己的行为，且方法中需要访问实例成员的，则该方法必须申明为实例方法。
如果该方法是为了声明一个共用功能为目的，则可以声明成静态方法。

注意事项：
静态的方法只能访问静态的成员，不能访问直接访问实例成员。
实例方法可以访问静态成员，也可以访问实例成员。
静态方法中不可以出现this关键字

应用知识：工具类
类中都是静态的方法，每个方法都是为了完成一个共用的功能为目的。

调用方便，提高了代码的复用性。 

工具类中的方法不用实例方法的原因：
1：实例方法需要创建方法调用，
2：此时使用对象调用方法会浪费内存。
注意：因为工具类中的方法直接使用类目调用，所以工具类无需创建对象，所以建议将工具类的构造器私有

应用知识：代码块
类的五大成分之一。
使用{}括起来的代码叫代码块

分为：静态代码块，构造代码块。
静态代码块 	static{}	  特点：随着类的加载而加载，自动触发，只执行一次	                                    作用：在类加载的时候做一些静态数据初始化的操作，以便后续使用
构造代码块。 	{}	       特点：每次创建对象，调用构造器执行时，都会执行该代码块的代码，并在构造器执行前执行，	 作用：用于初始化实例资源


应用知识：单例设计模式
应用该模式的这个类：永远只有一个实例，即一个类永远只能创建一个对象。

单例模式必须私有构造器。使外界无法访问构造器来创建对象。

饿汉单例模式:再类获取对象时，对象已经为你创建好了，

public class Test {
    public static void main(String[] args) {
        One one1=One.o;
        One one2=One.o;
        System.out.println(one1==one2);//true 地址相同
    }
}
class One{
    public static One o=new One();
    private One(){}

}

懒汉单例： 延迟加载对象，只有在需要的时候再创建对象
 
public class Test {
    public static void main(String[] args) {
        One one1=One.getOne();
        One one2=One.getOne();
        System.out.println(one1==one2);//true地址相同
    }
}
class One{
    private static One o; //将其私有化，防止被调用。
    private One(){}
    public static One getOne(){
        if(o!=null){
            return o;
        }
        return o=new One();
    }
}
