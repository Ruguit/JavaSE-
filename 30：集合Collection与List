概述：
集合中存储的是地址
大小不固定，启动后动态变化，类型也可以选择不固定。
集合提供了丰富的功能。
适用于元素个数不固定，且要进行增删改操作的业务场景。

注意：集合只能存储引用数据类型，不支持基本数据类型。在编译阶段就进行约束

集合的特点;
集合是Java中存储对象数据的一种容器。
1：大小不固定
2：类型不固定
3：适合做元素的增删操作。
4：集合中只能存储引用数据类型
存储基本数据类型要使用包装类

体系;
集合分为Collection（单列）集合与Map集合（双列）
Collection集合包含List集合与Set集合



Collection集合的常用API:
Collection集合是所有单列集合的祖宗接口：
提他的方法可以被所以单列集合继承：
Collection collecton=new ArrayList();
        //添加的方法
        collecton.add(1);
        //清空的方法
        collecton.clear();
        //删除指定对象的方法
        collecton.remove("1");
        //判断当前集合中是否包含指定对象
        collecton.contains(1);
        //判断当前集合是否为空
        collecton.isEmpty();
        //返回集合中元素的个数
        int num=collecton.size();
        //把集合中的元素存储到数组中间去
        Object []objects=collecton.toArray();
        
 Collection集合的遍历方式
 1：迭代器遍历
 Collection collecton=new ArrayList();
        //获取迭代器对象
        Collections.addAll(collecton,1,2,3,4,5,6);
        Iterator iterator= collecton.iterator();
        while (iterator.hasNext()){//查询当前元素是否存在
            System.out.println(iterator.next());//获取当前元素，然后迭代器对象移动到下一个地方。
        }
  2：增强for循环
  jdk5之后出现，实现Iterator接口
  Collection collecton=new ArrayList();
        //获取迭代器对象
        Collections.addAll(collecton,1,2,3,4,5,6);
        for (Object o : collecton) {
            System.out.println(o);
        }
  3:Lambda表达式写法
  Collection collecton=new ArrayList();
        //获取迭代器对象
        Collections.addAll(collecton,1,2,3,4,5,6);
        collecton.forEach(new Consumer() {
            @Override
            public void accept(Object o) {
                System.out.println(o);
            }
        });
        //简化
        collecton.forEach(System.out::println);
        collecton.forEach(s-> System.out.println(s));
        
   Collection集合存储自定义类型的对象
   
import java.util.ArrayList;
import java.util.Collection;

public class Test {
    public static void main(String[] args){
       Collection<Movie> movieCollection=new ArrayList<>();
       movieCollection.add(new Movie(1,"绣春刀"));
       movieCollection.add(new Movie(2,"杀破狼"));
       movieCollection.forEach(s-> System.out.println(s.getId()+"---"+s.getName()));
    }
}
class Movie{
    private int id;
    private String name;

    public Movie() {
    }

    public Movie(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}


List集合的独有方法 ：
List集合：有序，可重复，有索引
ArrayList集合底层是基于数组
LinkedList集合底层是基于双链表
List集合不仅继承了Collection集合的API，同时，还拥有以下独有的方法，
List<Integer> list=new ArrayList<>();
        //在知道索引的地方插入数据
        list.add(0,1);
        list.add(1,2);
        list.add(2,3);
        //删除指定地方的元素
        list.remove(0);
        //修改指定地方的元素
        list.set(0,100);
        //返回指定索引的元素
        list.get(0);
List集合添加了根据索引的遍历
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        
ArrayList集合的底层原理、
底层基于数组：
第一次创建集合并添加数据时，会在底层创建一个默认长度为10的数组。
当元素满额时，扩容放到原来的1.5倍。

LinkedList集合的底层原理：
dic基于双链表：
有很多首尾操作的API
addFirst()
addLast()
getFirst()
getLast()
removeFirst()
removeLast()
List与Collection的方法也可以使用。

List集合的并发修改异常问题
