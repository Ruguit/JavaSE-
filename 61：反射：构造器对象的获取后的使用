import org.junit.Test;

import java.lang.reflect.Constructor;

public class TestDamo{

    @Test
    public void Test4() throws Exception {
        Class aClass = Student.class;
        Constructor constructors=aClass.getConstructor(String.class,int.class,String.class);//返回单个构造器对象的数组 不论权限
        System.out.println(constructors.getParameterCount()+"==="+constructors.getName());//3===Student
        Student student1=(Student) constructors.newInstance("张三",20,"男");
        System.out.println(student1);//Student{name='张三', age=20, sex='男'}

        Constructor  constructor=aClass.getDeclaredConstructor();
        System.out.println(constructor.getName()+"----"+constructor.getParameterCount());//Student----0
        //如果遇到了私有的构造器，可以暴力反射
        constructor.setAccessible(true);//设置true，取消访问检查
        Student student =(Student) constructor.newInstance();
        System.out.println(student);//Student{name='null', age=0, sex='null'}
    }

}
class Student{
    private String name;
    private int age;
    private String sex;

    private Student() {
        System.out.println("无参构造器执行");
    }

    public Student(String name, int age, String sex) {
        System.out.println("有参数构造器执行");
        this.name = name;
        this.age = age;
        this.sex = sex;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", sex='" + sex + '\'' +
                '}';
    }
}
