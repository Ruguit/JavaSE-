概述;
定义在类里面的类，

静态内部类：
有static 修饰，属于外部类本身。
public class outer{
  public static class inner{} 
}
对象创建格式：
外部类名.内部类名.in=new 外部类名.内部类构造器；
特点：
可以直接访问外部类的静态成员，不能直接访问外部类的实例成员。

成员内部类：
无static 修饰，属于外部类的对象。
public class outer{
  public class inner{} 
}
对象创建格式：
外部类名.内部类名.in=new 外部类构造器.new内部类构造器；
特点：JDK16开始存在，
可以直接访问外部类的静态成员，成员内部类的实例方法可以直接访问外部类对象的实例成员。

匿名内部类：
定义在方法中，代码块中等，
作用：方便创建子类对象，
new 类名|抽象类名|接口名 （）{
  重写方法
}
特点：没名字，匿名内部类写出来就会产生一个匿名内部类对象 匿名内部类的类型就相当于new的那个类型的子类类型。
常见使用：

public class Test {
    public static void main(String[] args) {
        Swim s=new Swim() {
            @Override
            public void swimming() {
                System.out.println("我在游泳");
            }
        };
        go(s);
    }
    public static void go(Swim s){
        s.swimming();
    }
}
interface Swim{
    void swimming();
}
